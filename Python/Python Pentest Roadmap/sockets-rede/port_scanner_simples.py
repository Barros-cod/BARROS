#Use o wireshark para observar, analisar o tráfego de rede! 

import socket
import sys
import ipaddress

def scan_port(host, port, timeour=1):
    try:
        # Cria um socket TCP AFK_INET para IPV4.
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #Limite para a conexão, Demorou mais que 'timeour', ele desiste.
        s.settimeout(timeour)
        #Tenta se conectar ao host e porta, se for bem-sucedido.
        s.connect((host, port))
        return True
    except socket.timeout:
        return False
    except ConnectionRefusedError:
        return False
    except Exception as e:
        print(f"Erro ao escanear porta {port}: {e}") #Para debug
    finally:
        #Garante que o socket seja fechado.
        s.close()

def main():
    if len(sys.argv) < 2:
        print("Uso: python port_scanner_simples.py <IP_ALVO>")
        print("Exemplo: python port_scanner_simples.py 127.0.0.1")
        sys.exit(1)
    
    target_ip = sys.argv[1]

    # Validação do IP
    try:
        ipaddress.ip_address(target_ip)
    except ValueError:
        print(f"Erro: '{target_ip}' não é um endereço IP válido.")
        sys.exit(1)

    print(f"Iniciando scan de portas para o IP: {target_ip}")
    print("-" * 30)

    # Lista de portas simples.

    comman_ports = [
          20, 21, 22, 23, 25, 53, 67, 68, 69, 80, 110, 137, 138, 139, 143,
        443, 445, 3389, 8080, 8443
    ]

    open_ports = []

    for port in comman_ports:
        print(f"Testando porta {port}...", end='\r')
        if scan_port(target_ip, port):
            open_ports.append(port)
            print(f"Porta {port} [ABERTA]")
            
    print("-" * 30)
    if open_ports:
        print(f"Portas abertas encontradas em {target_ip}: {open_ports}")
    else:
        print(f"Nenhuma porta comum aberta encontrada em {target_ip}.")

if __name__ == "__main__":
    main()

input("Pressione ENTRE para sair...")
